<!DOCTYPE html>
<html lang="en" id="head">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>EPCarpool</title>
  <link href="./bulma.min.css" rel="stylesheet" type="text/css" />
  <link href="./style.css" rel="stylesheet" type="text/css" />
  <script src="https://kit.fontawesome.com/16ae8e710d.js" crossorigin="anonymous"></script>
  <link rel="icon" href="favicon.png" type="image/x-icon">
  <link rel="stylesheet" href="./style.css">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
  <script src="/co2Tracker.js"></script>
</head>

<body>
  <main>
    <section class="hero is-fullheight">
      <!-- Hero head: will stick at the top -->
      <div class="hero-head">
          <header class="navbar">
          <div class="container">
            <div class="navbar-brand">
              <a class="navbar-item">
                <div class="logo-container">
                  <img src="EPS Logo - Transparent-4.png" alt="Logo">
                  <h1 class="title title-with-logo">EPCarpool</h1>
                  <!-- TODO: make the icon blue and remove button background -->
                  <button class="info-button" onclick="showDisclaimer()">
                      <i class="fas fa-info-circle"></i>
                  </button>
                </div>
              </a>
              <span class="navbar-burger" data-target="navbarMenuHeroC" id="nav-toggle">
                <span></span>
                <span></span>
                <span></span>
              </span>
            </div>
            <div id="navbarMenuHeroC" class="navbar-menu ">
              <div class="navbar-start navbar-center">
                <!-- Centered quick nav links: Upcoming Events and My Carpools -->
                <a class="navbar-item nav-link active" href="/">Upcoming Events</a>
                <a class="navbar-item nav-link" href="/mycarpools">My Carpools</a>
              </div>
              <div class="navbar-end">
                <div class="is-button is-link">
                  <div class="navbar-item">
                    <a href="/sustainabilityStatement" class="co2-link">
                      <i class="fa-solid fa-leaf co2-leaf-icon"></i>

                      <span>
                        <span id="co2-savings" class="co2-savings-text">0 kg COâ‚‚ saved</span>
                        <span id="co2-equivalents" class="co2-equivalents"></span>

                      </span>
                    </a>
                    <div class="buttons user-buttons">
                      <div class="navbar-item has-dropdown is-hoverable "
                        onclick="document.getElementById('navbar-dropdown').style.visibility = 'visible';">
                        <a class="button is-link user-button" id="name_button">
                          <%= firstName %>
                            <%= lastName %>
                              <i class="fas fa-angle-down user-button-icon" aria-hidden="true"></i>
                        </a>
                        <div id="filler" class="dropdown-filler">
                        </div>
                        <div class="navbar-dropdown navbar-dropdown-custom" id="navbar-dropdown">
                          <a class="navbar-item" href="/updateSettings">
                            Update settings
                          </a>
                          <a class="navbar-item" href="https://forms.office.com/r/deCSjA7bCR">
                            Report a bug
                          </a>
                          <a class="navbar-item" href="/sustainabilityStatement">
                            Sustainability statement
                          </a>
                          <hr class="navbar-divider">
                          <a class="navbar-item" href="/logout">
                            Log out
                          </a>
                          <div class="navbar-item">
                            Version <%= process.env.VERSION %>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </header>
      </div>
      <!-- Hero content: will be in the middle -->
      <div class="hero-body hero-body-padding">
        <div class="container container-full-width">
          <!-- Upcoming Events Title -->
          <div class="upcoming-events-title">
            <h1 class="title is-3 upcoming-events-h1">Upcoming Events</h1>
          </div>

          <div class="search-and-create-container">
            <div class="search-container">
              <span class="search-icon">
                <i class="fas fa-search"></i>
              </span>
              <input type="text" id="searchInput" placeholder="Search events..." class="search-input">
            </div>

            <div id="createEventButton">
              <button id="buttonzx" class="button is-link is-outlined" onclick="openCreateEventModal()">Create event</button>
            </div>
          </div>
          <!--Start here  -->
          <div id="eventsJS">
          </div>
        </div>
      </div>

      <!-- Hero footer: will stick at the bottom -->
      <!-- hero-foot removed: navigation links moved to navbar -->
    </section>
  </main>
  <script></script>
  <!-- start here -->
  <div class="modal " id="modal-js-example">
    <div class="modal-background" class="modal-background-dark"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" class="modal-heading-offer">
        <span class="modal-heading-icon">
          <i class="fa-solid fa-car-side" class="modal-car-icon"></i>
        </span>
        Offer to Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" class="modal-delete-right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label>Carpool information </label>
          <div class="field">
            <a class="panel-block" id="carpoolinfo" class="carpool-panel-block">
              <input class="input carpool-inputs-margin" id="fname" type="fname" placeholder="Driver first name">
              <input id="lname" class="input" type="lname" placeholder="Driver last name">
            </a>
          </div>
          <div class="field">
            <a class="panel-block" class="carpool-panel-block">
              <input class="input carpool-inputs-margin" id="email" class="input" type="email" placeholder="Driver email">
              <input id="phone" class="input" type="tel" placeholder="Driver phone number">
            </a>
          </div>
          <div class="field" class="field-margin-bottom">
            <input class="input" id="carmake" type="text" placeholder="Car make and model">
          </div>
          <div class="field" class="field-margin-bottom">
            <input class="input" id="seats" type="number" min="1" max="9" placeholder="Number of available car seats">
          </div>
          <div class="pickup-options-container">
            <div>
              <label>Pickup Location </label>
              <div class="field" class="field-margin-bottom">
                <div class="control">
                  <div class="select">
                    <form>
                      <select id="route-type">
                        <option value="route">Riders' Homes</option>
                        <option value="point">Common meeting point</option>
                        <option value="eps-campus">EPS Campus</option>
                      </select>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <label>Arrival time</label>
              <div class="field" class="field-margin-bottom">
                <input class="input" id="arrivaltime" type="time" placeholder="Time to arrive">
              </div>
            </div>
          </div>
          <div class="field">
            <label id="address-label">Your home address</label>
            <div class="autocomplete-container" id="">
              <div class="control" id="autocomplete-container">
                <div class="clear-button"></div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" class="modal-footer-custom">
        <div class="buttons" class="modal-buttons-left">
          <button class="button is-link " class="modal-button-primary"
            onclick="offer();window.location.href='/mycarpools'">Create carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <!-- start here -->
  <div class="modal " id="modal-js-register">
    <div class="modal-background" class="modal-background-dark"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" class="modal-heading-register">
        <span class="modal-register-icon">
          <i class="fa-solid fa-users" class="modal-users-icon"></i>
        </span>
        Register to a Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" class="modal-delete-right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label id="registerTitle"></label>

          <div class="register-overflow">
            <div id="registerJS">
              <!-- <div class="notification" style="padding: 10px;   margin-bottom: 10px;">
                           <div class="button  selectCarpool" style=" margin-left: 10px; margin-top: 4px; background-color: transparent; float: right" onclick=" if (this.classList[2] == 'is-focused') {unfocus()} else {unfocus(); this.classList.add('is-focused')}">Select</div>
                                   <div style="float: right; margin-top: 3px;"  >2/6 signed up</div>
                                                             Organizer: <a style="color: #3273dc" href="mailto:ajosan@eastsideprep.org">ajosan@eastsideprep.org</a>
                                     <br>  Route type: Riders' Homes
                           <br> 
                                 </div>    -->
            </div>
          </div>
        </div>
        <div class="field">
          <label>Your home address </label>
          <div class="autocomplete-container " id="">
            <div class='control' id="autocomplete-container2">
              <!-- South Kirkland Park and Ride, Bellevue, WA 98004, United States of America -->
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" class="modal-footer-custom">
        <var></var>
        <div class="buttons" class="modal-buttons-left">
          <button class="button is-link " class="modal-button-primary"
            onclick="joinCarpool(); window.location.href='/mycarpools'">Join carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <!-- Create Event Modal -->
  <div class="modal" id="modal-create-event">
    <div class="modal-background" onclick="closeCreateEventModal()"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">Create Event</div>
        <button class="delete" aria-label="close" onclick="closeCreateEventModal()"></button>
      </div>
      <section class="modal-card-body">
        <div class="field">
          <label class="label" for="ename">Event name:</label>
          <div class="control">
            <input class="input" type="text" id="ename" name="name">
          </div>
        </div>
        <div class="field">
          <label class="label" for="elocation">Location name:</label>
          <div class="control">
            <input class="input" type="text" id="elocation" name="location">
          </div>
        </div>
        <div class="field">
          <label class="label" for="address">Address:</label>
          <div class="autocomplete-container" id="">
            <div class="control" id="autocomplete-container3">
              <!-- Address autocomplete will be inserted here -->
            </div>
          </div>
        </div>
        <div class="field">
          <label class="label" for="edate">Date and time:</label>
          <div class="control">
            <input class="input" type="datetime-local" id="edate" name="date">
          </div>
        </div>
        <div class="field">
          <label class="label" for="ecategory">Category:</label>
          <div class="control">
            <div class="select">
              <select id="ecategory" name="category">
                <option value="sports">Sports</option>
                <option value="academic teams">Academic teams</option>
                <option value="socials">Socials</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot">
        <div class="buttons">
          <button class="button is-link" onclick="createEventAndClose()">Submit</button>
          <button class="button" onclick="closeCreateEventModal()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end Create Event Modal -->
  <script></script>
  <!-- start here -->
  <div class="modal " id="modal-js-example">
    <div class="modal-background" class="modal-background-dark"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" class="modal-heading-offer">
        <span class="modal-heading-icon">
          <i class="fa-solid fa-car-side" class="modal-car-icon"></i>
        </span>
        Offer to Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" class="modal-delete-right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label>Carpool information </label>
          <div class="field">
            <a class="panel-block" id="carpoolinfo" class="carpool-panel-block">
              <input class="input carpool-inputs-margin" id="fname" type="fname" placeholder="Driver first name">
              <input id="lname" class="input" type="lname" placeholder="Driver last name">
            </a>
          </div>
          <div class="field">
            <a class="panel-block" class="carpool-panel-block">
              <input class="input carpool-inputs-margin" id="email" class="input" type="email" placeholder="Driver email">
              <input id="phone" class="input" type="tel" placeholder="Driver phone number">
            </a>
          </div>
          <div class="field" class="field-margin-bottom">
            <input class="input" id="carmake" type="text" placeholder="Car make and model">
          </div>
          <div class="field" class="field-margin-bottom">
            <input class="input" id="seats" type="number" min="1" max="9" placeholder="Number of available car seats">
          </div>
          <div class="pickup-options-container">
            <div>
              <label>Pickup Location </label>
              <div class="field" class="field-margin-bottom">
                <div class="control">
                  <div class="select">
                    <form>
                      <select id="route-type">
                        <option value="route">Riders' Homes</option>
                        <option value="point">Common meeting point</option>
                        <option value="eps-campus">EPS Campus</option>
                      </select>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <label>Arrival time</label>
              <div class="field" class="field-margin-bottom">
                <input class="input" id="arrivaltime" type="time" placeholder="Time to arrive">
              </div>
            </div>
            <div>
              <label>Carpool category</label>
              <div class="field" class="field-margin-bottom">
                <div class="control">
                  <div class="select">
                    <select id="carpool-category">
                      <option value="sports">Sports</option>
                      <option value="academic">Academic</option>
                      <option value="social">Social</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="field">
            <label id="address-label">Your home address</label>
            <div class="autocomplete-container" id="">
              <div class="control" id="autocomplete-container">
                <div class="clear-button"></div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" class="modal-footer-custom">
        <div class="buttons" class="modal-buttons-left">
          <button class="button is-link " class="modal-button-primary"
            onclick="offer();window.location.href='/mycarpools'">Create carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <!-- start here -->
  <div class="modal " id="modal-js-register">
    <div class="modal-background" class="modal-background-dark"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" class="modal-heading-register">
        <span class="modal-register-icon">
          <i class="fa-solid fa-users" class="modal-users-icon"></i>
        </span>
        Register to a Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" class="modal-delete-right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label id="registerTitle"></label>

          <div class="register-overflow">
            <div id="registerJS">
              <!-- <div class="notification" style="padding: 10px;   margin-bottom: 10px;">
                           <div class="button  selectCarpool" style=" margin-left: 10px; margin-top: 4px; background-color: transparent; float: right" onclick=" if (this.classList[2] == 'is-focused') {unfocus()} else {unfocus(); this.classList.add('is-focused')}">Select</div>
                                   <div style="float: right; margin-top: 3px;"  >2/6 signed up</div>
                                                             Organizer: <a style="color: #3273dc" href="mailto:ajosan@eastsideprep.org">ajosan@eastsideprep.org</a>
                                     <br>  Route type: Riders' Homes
                           <br> 
                                 </div>    -->
            </div>
          </div>
        </div>
        <div class="field">
          <label>Your home address </label>
          <div class="autocomplete-container " id="">
            <div class='control' id="autocomplete-container2">
              <!-- South Kirkland Park and Ride, Bellevue, WA 98004, United States of America -->
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" class="modal-footer-custom">
        <var></var>
        <div class="buttons" class="modal-buttons-left">
          <button class="button is-link " class="modal-button-primary"
            onclick="joinCarpool(); window.location.href='/mycarpools'">Join carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <script type="text/javascript">
    //Don't worry about it
    console.error("HTTP ERROR: 418 I'm a teapot");

function addressAutocomplete(containerElement, idName, callback, options) {
          // create input element
          var inputElement = document.createElement("input");
          inputElement.setAttribute("type", "text");
          inputElement.setAttribute("placeholder", options.placeholder);
          inputElement.setAttribute("id", idName);
          inputElement.classList.add("input");
          containerElement.appendChild(inputElement);



          // add input field clear button
          var clearButton = document.createElement("div");
          clearButton.classList.add("clear-button");
          addIcon(clearButton);
          clearButton.addEventListener("click", (e) => {
            e.stopPropagation();
            inputElement.value = '';
            callback(null);
            clearButton.classList.remove("visible");
            closeDropDownList();
          });
          containerElement.appendChild(clearButton);

          /* Current autocomplete items data (GeoJSON.Feature) */
          var currentItems;

          /* Active request promise reject function. To be able to cancel the promise when a new request comes */
          var currentPromiseReject;

          /* Focused item in the autocomplete list. This variable is used to navigate with buttons */
          var focusedItemIndex;

          /* Execute a function when someone writes in the text field: */
          inputElement.addEventListener("input", function (e) {
            var currentValue = this.value;

            // Add null checks before accessing classList
            var ac1 = document.getElementById("autocomplete-container");
            var ac2 = document.getElementById("autocomplete-container2");
            var ac3 = document.getElementById("autocomplete-container3");
            if (ac1) ac1.classList.add("is-loading");
            if (ac2) ac2.classList.add("is-loading");
            if (ac3) ac3.classList.add("is-loading");

            /* Close any already open dropdown list */
            closeDropDownList();

            // Cancel previous request promise
            if (currentPromiseReject) {
              currentPromiseReject({
                canceled: true
              });
            }

            if (!currentValue) {
              clearButton.classList.remove("visible");
              return false;
            }

            // Show clearButton when there is a text
            clearButton.classList.add("visible");

            /* Create a new promise and send geocoding request */
            var promise = new Promise((resolve, reject) => {
              currentPromiseReject = reject;

              // TODO: Fix this
              var apiKey = "992ef3d60d434f2283ea8c6d70a4898d";
              var url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(currentValue)}&limit=5&apiKey=${apiKey}`;

              if (options.type) {
                url += `&type=${options.type}`;
              }

              fetch(url)
                .then(response => {
                  // check if the call was successful
                  if (response.ok) {
                    response.json().then(data => resolve(data));

                  } else {
                    response.json().then(data => reject(data));
                  }
                });
            });

            promise.then((data) => {
              if (ac1) ac1.classList.remove("is-loading");
              if (ac2) ac2.classList.remove("is-loading");
              if (ac3) ac3.classList.remove("is-loading");
              currentItems = data.features;

              /*create a DIV element that will contain the items (values):*/
              var autocompleteItemsElement = document.createElement("div");
              autocompleteItemsElement.setAttribute("class", "autocomplete-items");
              containerElement.appendChild(autocompleteItemsElement);

              /* For each item in the results */
              data.features.forEach((feature, index) => {
                /* Create a DIV element for each element: */
                var itemElement = document.createElement("DIV");
                /* Set formatted address as item value */
                itemElement.innerHTML = feature.properties.formatted;
                itemElement.classList.add("hoverAddress");
                /* Set the value for the autocomplete text field and notify: */
                itemElement.addEventListener("click", function (e) {
                  inputElement.value = currentItems[index].properties.formatted;



                  callback(currentItems[index]);

                  /* Close the list of autocompleted values: */
                  closeDropDownList();
                });

                autocompleteItemsElement.appendChild(itemElement);
              });
            }, (err) => {
              if (!err.canceled) {
                console.log(err);
              }
            });
          });

          /* Add support for keyboard navigation */
          inputElement.addEventListener("keydown", function (e) {
            var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
            if (autocompleteItemsElement) {
              var itemElements = autocompleteItemsElement.getElementsByTagName("div");
              if (e.keyCode == 40) {
                e.preventDefault();
                /*If the arrow DOWN key is pressed, increase the focusedItemIndex variable:*/
                focusedItemIndex = focusedItemIndex !== itemElements.length - 1 ? focusedItemIndex + 1 : 0;
             /*and and make the current item more visible:*/-
                  setActive(itemElements, focusedItemIndex);
              } else if (e.keyCode == 38) {
                e.preventDefault();

                /*If the arrow UP key is pressed, decrease the focusedItemIndex variable:*/
                focusedItemIndex = focusedItemIndex !== 0 ? focusedItemIndex - 1 : focusedItemIndex = (itemElements.length - 1);
                /*and and make the current item more visible:*/
                setActive(itemElements, focusedItemIndex);
              } else if (e.keyCode == 13) {
                /* If the ENTER key is pressed and value as selected, close the list*/
                e.preventDefault();
                if (focusedItemIndex > -1) {
                  closeDropDownList();
                }
              }
            } else {
              if (e.keyCode == 40) {
                /* Open dropdown list again */
                var event = document.createEvent('Event');
                event.initEvent('input', true, true);
                inputElement.dispatchEvent(event);
              }
            }
          });

          function setActive(items, index) {
            if (!items || !items.length) return false;

            for (var i = 0; i < items.length; i++) {
              items[i].classList.remove("autocomplete-active");
            }

            /* Add class "autocomplete-active" to the active element*/
            items[index].classList.add("autocomplete-active");

            // Change input value and notify
            inputElement.value = currentItems[index].properties.formatted;
            callback(currentItems[index]);
          }

          function closeDropDownList() {
            var autocompleteItemsElement = containerElement.querySelector(".autocomplete-items");
            if (autocompleteItemsElement) {
              containerElement.removeChild(autocompleteItemsElement);
            }

            focusedItemIndex = -1;
          }

          function addIcon(buttonElement) {
            var svgElement = document.createElementNS("", 'svg');
            svgElement.setAttribute('viewBox', "0 0 24 24");
            svgElement.setAttribute('height', "24");


          }
    /* Close the autocomplete dropdown when the document is clicked. 
          Skip, when a user clicks on the input field */
          document.addEventListener("click", function (e) {
            if (e.target !== inputElement) {
              closeDropDownList();
            } else if (!containerElement.querySelector(".autocomplete-items")) {
              // open dropdown list again
              var event = document.createEvent('Event');
              event.initEvent('input', true, true);
              inputElement.dispatchEvent(event);
            }
          });
        }

    function createEventInputs() {
        addressAutocomplete(document.getElementById("autocomplete-container3"), "create_address", (data) => {
          arr.push(data.properties.formatted);
        }, {

          placeholder: "Enter an address here"

                    });

        // Restrict event categories to allowed values
        try {
          var catSelect = document.getElementById('ecategory');
          if (catSelect) {
            catSelect.innerHTML = "" +
              "<option value='School'>School</option>" +
              "<option value='Sports'>Sports</option>" +
              "<option value='Extra School Events'>Extra School Events</option>";
          }
        } catch (e) { console.warn('Failed to set category options', e); }

                  }
                </script>
            </span>
          </div>
          <!--Start here  -->
          <div id="eventsJS">
          </div>
        </div>
      </div>

      <!-- Hero footer: will stick at the bottom -->
      <!-- hero-foot removed: navigation links moved to navbar -->
    </section>
  </main>
  <script></script>
  <!-- start here -->
  <div class="modal " id="modal-js-example">
    <div class="modal-background" class="modal-background-dark"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" class="modal-heading-offer">
        <span class="modal-heading-icon">
          <i class="fa-solid fa-car-side" class="modal-car-icon"></i>
        </span>
        Offer to Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" class="modal-delete-right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label>Carpool information </label>
          <div class="field">
            <a class="panel-block" id="carpoolinfo" class="carpool-panel-block">
              <input class="input carpool-inputs-margin" id="fname" type="fname" placeholder="Driver first name">
              <input id="lname" class="input" type="lname" placeholder="Driver last name">
            </a>
          </div>
          <div class="field">
            <a class="panel-block" class="carpool-panel-block">
              <input class="input carpool-inputs-margin" id="email" class="input" type="email" placeholder="Driver email">
              <input id="phone" class="input" type="tel" placeholder="Driver phone number">
            </a>
          </div>
          <div class="field" class="field-margin-bottom">
            <input class="input" id="carmake" type="text" placeholder="Car make and model">
          </div>
          <div class="field" class="field-margin-bottom">
            <input class="input" id="seats" type="number" min="1" max="9" placeholder="Number of available car seats">
          </div>
          <div class="pickup-options-container">
            <div>
              <label>Pickup Location </label>
              <div class="field" class="field-margin-bottom">
                <div class="control">
                  <div class="select">
                    <form>
                      <select id="route-type">
                        <option value="route">Riders' Homes</option>
                        <option value="point">Common meeting point</option>
                        <option value="eps-campus">EPS Campus</option>
                      </select>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <label>Arrival time</label>
              <div class="field" class="field-margin-bottom">
                <input class="input" id="arrivaltime" type="time" placeholder="Time to arrive">
              </div>
            </div>
            <div>
              <label>Carpool category</label>
              <div class="field" class="field-margin-bottom">
                <div class="control">
                  <div class="select">
                    <select id="carpool-category">
                      <option value="sports">Sports</option>
                      <option value="academic">Academic</option>
                      <option value="social">Social</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="field">
            <label id="address-label">Your home address</label>
            <div class="autocomplete-container" id="">
              <div class="control" id="autocomplete-container">
                <div class="clear-button"></div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" class="modal-footer-custom">
        <div class="buttons" class="modal-buttons-left">
          <button class="button is-link " class="modal-button-primary"
            onclick="offer();window.location.href='/mycarpools'">Create carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <!-- start here -->
  <div class="modal " id="modal-js-register">
    <div class="modal-background" class="modal-background-dark"></div>
    <div class="modal-card">
      <p class="panel-heading has-text-centered" class="modal-heading-register">
        <span class="modal-register-icon">
          <i class="fa-solid fa-users" class="modal-users-icon"></i>
        </span>
        Register to a Carpool
        <button class="delete" aria-label="close" onclick="closeAllModals()" class="modal-delete-right"></button>
      </p>
      <section class="modal-card-body">
        <div class="container">
          <label id="registerTitle"></label>

          <div class="register-overflow">
            <div id="registerJS">
              <!-- <div class="notification" style="padding: 10px;   margin-bottom: 10px;">
                           <div class="button  selectCarpool" style=" margin-left: 10px; margin-top: 4px; background-color: transparent; float: right" onclick=" if (this.classList[2] == 'is-focused') {unfocus()} else {unfocus(); this.classList.add('is-focused')}">Select</div>
                                   <div style="float: right; margin-top: 3px;"  >2/6 signed up</div>
                                                             Organizer: <a style="color: #3273dc" href="mailto:ajosan@eastsideprep.org">ajosan@eastsideprep.org</a>
                                     <br>  Route type: Riders' Homes
                           <br> 
                                 </div>    -->
            </div>
          </div>
        </div>
        <div class="field">
          <label>Your home address </label>
          <div class="autocomplete-container " id="">
            <div class='control' id="autocomplete-container2">
              <!-- South Kirkland Park and Ride, Bellevue, WA 98004, United States of America -->
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot" class="modal-footer-custom">
        <var></var>
        <div class="buttons" class="modal-buttons-left">
          <button class="button is-link " class="modal-button-primary"
            onclick="joinCarpool(); window.location.href='/mycarpools'">Join carpool</button>
          <button class="button" aria-label="close" onclick="closeAllModals()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end here -->
  <!-- Create Event Modal -->
  <div class="modal" id="modal-create-event">
    <div class="modal-background" onclick="closeCreateEventModal()"></div>
    <div class="modal-card">
      <div class="modal-card-head">
        <div class="modal-card-title">Create Event</div>
        <button class="delete" aria-label="close" onclick="closeCreateEventModal()"></button>
      </div>
      <section class="modal-card-body">
        <div class="field">
          <label class="label" for="ename">Event name:</label>
          <div class="control">
            <input class="input" type="text" id="ename" name="name">
          </div>
        </div>
        <div class="field">
          <label class="label" for="elocation">Location name:</label>
          <div class="control">
            <input class="input" type="text" id="elocation" name="location">
          </div>
        </div>
        <div class="field">
          <label class="label" for="address">Address:</label>
          <div class="autocomplete-container" id="">
            <div class="control" id="autocomplete-container3">
              <!-- Address autocomplete will be inserted here -->
            </div>
          </div>
        </div>
        <div class="field">
          <label class="label" for="edate">Date and time:</label>
          <div class="control">
            <input class="input" type="datetime-local" id="edate" name="date">
          </div>
        </div>
        <div class="field">
          <label class="label" for="ecategory">Category:</label>
          <div class="control">
            <div class="select">
              <select id="ecategory" name="category">
                <option value="sports">Sports</option>
                <option value="academic teams">Academic teams</option>
                <option value="socials">Socials</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
        </div>
      </section>
      <footer class="modal-card-foot">
        <div class="buttons">
          <button class="button is-link" onclick="createEventAndClose()">Submit</button>
          <button class="button" onclick="closeCreateEventModal()">Cancel</button>
        </div>
      </footer>
    </div>
  </div>
  <!-- end Create Event Modal -->
  <script type="text/javascript">
    // Create Event Modal Functions
    function openCreateEventModal() {
      document.getElementById('modal-create-event').classList.add('is-active');
      // Initialize autocomplete for address field when modal opens
      createEventInputs();
    }

    function closeCreateEventModal() {
      document.getElementById('modal-create-event').classList.remove('is-active');
      // Clear form fields
      document.getElementById('ename').value = '';
      document.getElementById('elocation').value = '';
      document.getElementById('edate').value = '';
      document.getElementById('ecategory').value = 'sports';
      // Clear address field if it exists
      const addressInput = document.getElementById('create_address');
      if (addressInput) {
        addressInput.value = '';
      }
    }

    async function createEventAndClose() {
      await createevent();
      closeCreateEventModal();
      // Refresh the page to show the new event
      window.location.reload();
    }
  </script>
  <script>
    //Don't worry about it
    console.error("418 I'm a teapot");

    let value2;
    let data1;
    //Sends get request to mongo users db
    var request = new Request("/api/users", {
      method: "GET",
      headers: new Headers({
        Accept: 'application/json',
        'Content-Type': 'application/json',
      })
    });
    fetch(request)
      .then((response) => response.json())
      .then((data) => {
        data1 = data;
        for (let k = 0; k < data1.length; k++) {
          //makes user email equal what we get from db
          if (data1[k].email === "<%= email %>") {
            value2 = data1[k].address;
          }
          else {
            continue;
          }
        }
      })


    //create vars
    let carpooledEvents = []
    let userData1;
    let carpoolPart;
    let carpooledEvent
    let eventsW;
    let selectedCarpool = null;
    let eventsW2 = [];
    let datarray = [];
    let routeType;
    let arr = [];

    //get from mongo carpools db
    var request = new Request("/api/carpools", {
      method: "GET",
      headers: new Headers({
        Accept: 'application/json',
        'Content-Type': 'application/json',
      })
    });
    fetch(request)
      .then((response) => response.json())
      .then((data) => {
        //store data
        userData1 = data;

        //checks if user has registered for event
        function checkIfRegistered(userData1) {


          for (var i = 0; i < userData1.length; i++) {
            carpoolPart = userData1[i].carpoolers.find((x) => x.email === "<%= email %>")
            if (carpoolPart != undefined) {
              carpoolPart = carpoolPart.email
            }
            if (carpoolPart == "<%= email %>") {
              carpooledEvent = eventsW2.find((x) => x._id === userData1[i].nameOfEvent)
              if (carpooledEvent != undefined) {
                carpooledEvents.push(carpooldEvent)
              }
            }
          }


          turnRegistered(carpooledEvents)
        }

        function turnRegistered(eventsToDisable) {

          for (var i = 0; i < eventsToDisable.length; i++) {
            const card = document.getElementById(eventsToDisable[i]._id).closest('.modern-event-card');
            if (card) {
              card.classList.add('disabled');
              const primaryBtn = card.querySelector('.modern-btn-primary');
              if (primaryBtn) {
                primaryBtn.disabled = true;
                primaryBtn.innerHTML = "Registered for this event";
              }
            }
          }
        }

        function getDayOfWeek(string) {
          const d = new Date(string);
          const dayOfWeek = d.getDay();

          // Example: Get the name of the weekday (not just a number)
          const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
          const currentDay = weekdays[dayOfWeek];
          return (currentDay)
        }

        function formatDate(date) {
          const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
          var date = new Date(date);

          const month = date.getMonth();
          const year = date.getFullYear();
          return `${months[month]} ${date.getDate()}, ${year}`;
        }

        function sendData(data) {
          datarray.push(data);
        }

        function isFuture(dateStr) {
          const now = new Date();
          const d = new Date(dateStr);
          return d > now;
        }

        // Map event category to a CSS class for color coding
        function getCategoryClass(cat) {
          switch ((cat || '').toLowerCase()) {
            case 'school':
              return 'cat-school';
            case 'sports':
              return 'cat-sports';
            case 'extra school events':
              return 'cat-extra';
            default:
              return 'cat-other';
          }
        }

        var request = new Request("/api/events", {
          method: "GET",
          headers: new Headers({
            Accept: 'application/json',
            'Content-Type': 'application/json',
          })
        });
        fetch(request)
          .then((response) => response.json())
          .then((data) => {

            eventsW = data.filter(e => isFuture(e.date));
            eventsW2 = sortJSON(eventsW, 'date', '123');

            for (var i = 0; i < eventsW2.length; i++) {
              var obj = eventsW2[i];
              var date = formatDate(obj["date"]);
              var time = new Date(obj["date"]).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });

              // Calculate available carpools for this event
              var availableCarpools = userData1.filter(carpool => carpool.nameOfEvent === obj["_id"]).length;

              document.getElementById("eventsJS").innerHTML += `
                <div class="modern-event-card">
                  <div class="modern-category-tag ${getCategoryClass(obj["category"])}">${obj["category"]}</div>
                  <h3 class="modern-event-title">${obj["eventName"]}</h3>
                  <div class="modern-event-details">
                    <div class="modern-detail-row">
                      <div class="modern-detail-icon">
                        <i class="fa-solid fa-calendar"></i>
                      </div>
                      <span>${date} at ${time}</span>
                    </div>
                    <div class="modern-detail-row">
                      <div class="modern-detail-icon">
                        <i class="fa-solid fa-location-dot"></i>
                      </div>
                      <span>${obj["wlocation"]}</span>
                    </div>
                    <div class="modern-detail-row">
                      <div class="modern-detail-icon">
                        <i class="fa-solid fa-users"></i>
                      </div>
                      <span>${availableCarpools} carpool(s) available</span>
                    </div>
                  </div>
                  <div class="modern-action-buttons">
                    <button class="modern-btn-primary js-modal-trigger" data-target="modal-js-register" id="${obj["_id"]}" onclick="sendData('${obj["_id"]}')">Join Carpool</button>
                    <button class="modern-btn-secondary js-modal-trigger" data-target="modal-js-example" id="${obj["_id"]}_offer" onclick="sendData('${obj["_id"]}')">Offer Carpool</button>
                  </div>
                </div>`;

            }
            checkIfRegistered(userData1)

            //sort events by date
            function sortJSON(arr, key, way) {
              return arr.sort(function (a, b) {
                var datex = a[key]; var datey = b[key];

                datex = new Date(datex)
                datey = new Date(datey)
                x = datex.getTime() / 1000
                y = datey.getTime() / 1000
                if (way === '123') { return ((x < y) ? -1 : ((x > y) ? 1 : 0)); }
                if (way === '321') { return ((x > y) ? -1 : ((x < y) ? 1 : 0)); }
              });
            }

            // eventsW2 = sortJSON(eventsW,'date', '123'); 




            document.getElementById("searchInput").oninput = searchEvents;
            function searchEvents() {
              const searchTerm = document.getElementById("searchInput").value.toLowerCase();
              document.getElementById("eventsJS").innerHTML = ``;
              
              for (var i = 0; i < eventsW2.length; i++) {
                var obj = eventsW2[i];
                var date = formatDate(obj["date"]);
                var time = new Date(obj["date"]).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });
                
                // Calculate available carpools for this event
                var availableCarpools = userData1.filter(carpool => carpool.nameOfEvent === obj["_id"]).length;
                
                // Check if the search term matches event name, location, or category
                const matchesSearch = searchTerm === '' || 
                  obj["eventName"].toLowerCase().includes(searchTerm) ||
                  obj["wlocation"].toLowerCase().includes(searchTerm) ||
                  obj["category"].toLowerCase().includes(searchTerm);
                
                if (matchesSearch) {
                  document.getElementById("eventsJS").innerHTML += `
                    <div class="modern-event-card">
                      <div class="modern-category-tag ${getCategoryClass(obj["category"])}">${obj["category"]}</div>
                      <h3 class="modern-event-title">${obj["eventName"]}</h3>
                      <div class="modern-event-details">
                        <div class="modern-detail-row">
                          <div class="modern-detail-icon">
                            <i class="fa-solid fa-calendar"></i>
                          </div>
                          <span>${date} at ${time}</span>
                        </div>
                        <div class="modern-detail-row">
                          <div class="modern-detail-icon">
                            <i class="fa-solid fa-location-dot"></i>
                          </div>
                          <span>${obj["wlocation"]}</span>
                        </div>
                        <div class="modern-detail-row">
                          <div class="modern-detail-icon">
                            <i class="fa-solid fa-users"></i>
                          </div>
                          <span>${availableCarpools} carpool(s) available</span>
                        </div>
                      </div>
                      <div class="modern-action-buttons">
                        <button class="modern-btn-primary js-modal-trigger" data-target="modal-js-register" id="${obj["_id"]}" onclick="sendData('${obj["_id"]}')">Join Carpool</button>
                        <button class="modern-btn-secondary js-modal-trigger" data-target="modal-js-example" id="${obj["_id"]}_offer" onclick="sendData('${obj["_id"]}')">Offer Carpool</button>
                      </div>
                    </div>`;
                }
              }

              checkIfRegistered(userData1)
              modalFunctions()
            }


            function modalFunctions() {


              function openModal($el) {
                $el.classList.add('is-active');






                document.getElementById("registerJS").innerHTML = ``;

                //checks if the carpools id matches an events id

                for (var i = 0; i < eventsW2.length; i++) {
                  if (eventsW2[i]._id == datarray[datarray.length - 1]) {
                    eventTime = new Date(eventsW2[i].date);

                    let dayOfWeek = eventTime.getDay();
                    const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                    let day = weekdays[dayOfWeek];

                    // Format time as AM/PM
                    eventTime = eventTime.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });

                    document.getElementById("registerTitle").innerText = "Choose a carpool Â· " + day + " at " + eventTime
                  }
                }


                for (var i = 0; i < userData1.length; i++) {
                  var obj = userData1[i];

                  if (obj["nameOfEvent"] == datarray[datarray.length - 1]) {



                    //datarray[datarray.length - 1]



                    if (obj["route"] == "route") {
                      routeType = "Riders' Homes"
                    }
                    else if (obj["route"] == "point") {
                      routeType = "Common meeting point"
                    }
                    else if (obj["route"] == "eps-campus") {
                      routeType = "EPS Campus"
                    }

                    document.getElementById("registerJS").innerHTML +=
                      `<div class="notification"  style="padding: 10px;   margin-bottom: 10px;">
                                                      <div class="button  selectCarpool" style=" margin-left: 10px; margin-top: 4px; background-color: transparent; float: right" onclick=" selectCarpool(this)" id="` + obj["_id"] + `">Select</div>
                                                              <div style="float: right; margin-top: 3px;"  >` + obj["carpoolers"].length + `/` + obj["seats"] + ` signed up</div>
                                                                                        Organizer: <a style="color: #3273dc" href="mailto:` + obj["email"] + `">` + obj["email"] + `</a>
                                                                <br> Driver name: ` + obj["firstName"] + ` ` + obj["lastName"] + `
                                                                <br> Phone: ` + obj["phone"] + `
                                                                <br> Car: ` + obj["carMake"] + `
                                                                <br> Route type: ` + routeType + `
                                                                <br> Arrival time: ` + obj["arrivalTime"] + `
                       <br>                                                                                          </div>   `
                  }
                }

                if (value2 != "none" && value2 != null && value2 != false) {
                  document.getElementById("address-input").value = value2;
                  document.getElementById("address-input2").value = value2;
                }
              }

              function closeModal($el) {
                $el.classList.remove('is-active');
              }

              function closeAllModals() {
                (document.querySelectorAll('.modal') || []).forEach(($modal) => {
                  closeModal($modal);
                });
              }

              // Add a click event on buttons to open a specific modal
              (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
                const modal = $trigger.dataset.target;
                const $target = document.getElementById(modal);

                $trigger.addEventListener('click', () => {
                  openModal($target);
                });
              });

              // Add a click event on various child elements to close the parent modal
              (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .cancel') || []).forEach(($close) => {
                const $target = $close.closest('.modal');

                $close.addEventListener('click', () => {
                  closeModal($target);
                });
              });

              // Add a keyboard event to close all modals
              document.addEventListener('keydown', (event) => {
                const e = event || window.event;

                if (e.keyCode === 27) { // Escape key
                  closeAllModals();
                }
              });

            }
            modalFunctions()

          })
          .catch((error) => {
            console.error(error);
          });

        /* 
        The addressAutocomplete takes as parameters:
        - a container element (div)
        - callback to notify about address selection
        - geocoder options:
        - placeholder - placeholder text for an input element
        - type - location type
        */





        document.body.onmousedown = function () {
          var ac1 = document.getElementById('autocomplete-container');
          var ac2 = document.getElementById('autocomplete-container2');
          var ac3 = document.getElementById('autocomplete-container3');
          if (ac1) ac1.classList.remove("is-loading");
          if (ac2) ac2.classList.remove("is-loading");
          if (ac3) ac3.classList.remove("is-loading");
        }



        
      
        

        addressAutocomplete(document.getElementById("autocomplete-container"), "address-input", (data) => {
          arr.push(data.properties.formatted);
        }, {

          placeholder: "Enter an address here"

        });

    
        addressAutocomplete(document.getElementById("autocomplete-container2"), "address-input2", (data) => {
          arr.push(data.properties.formatted);
        }, {

          placeholder: "Enter an address here"

        });
        

       

        // Code for the second function


        // var request = new Request("/api/carpools", {
        //    method: "GET",
        //    headers: new Headers({
        //      Accept: 'application/json',
        //      'Content-Type': 'application/json',
        //    })
        //  });
        //  fetch(request)
        //    .then((response) => response.json())
        //    .then((data) => {

        //    })
        //add first name + last name: address to the carpoolers list in correct carpool id (selectedCarpool) carpools database








        // Call the first function and then execute the second function using .then()




        // tell the embed parent frame the height of the content
        if (window.parent && window.parent.parent) {
          window.parent.parent.postMessage(["resultsFrame", {
            height: document.body.getBoundingClientRect().height,
            slug: "akzrtm26"
          }], "*")
        }

        // always overwrite window.name, in case users try to set it manually
        window.name = "result"






        var route_type = document.getElementById("route-type");
        var address_label = document.getElementById("address-label");

        function changeLabel() {
          if (route_type.value == "route") {
            address_label.innerText = "Your home address";
            document.getElementById("address-input").disabled = false;
            if (value2 != "none" && value2 != false) {
              document.getElementById("address-input").value = value2;
            }
          }
          else if (route_type.value == "point") {
            address_label.innerText = "Meeting point";
            document.getElementById("address-input").value = "";
            document.getElementById("address-input").disabled = false;
          }
          else if (route_type.value == "eps-campus") {
            address_label.innerText = "EPS Campus";
            document.getElementById("address-input").value = "10613 NE 38th Place, Kirkland, WA 98033";
            document.getElementById("address-input").disabled = true;
          }
        }

        route_type.onchange = changeLabel;
        changeLabel();



      })
      .catch((error) => {
        console.error(error)
      });

    function sendData(data) {
      datarray.push(data);
    }

    function offer(id) {
      let newArray = document.getElementById("address-input").value
      let DriverFName = document.getElementById("fname").value;
      let DriverLName = document.getElementById("lname").value;
      let DriverEmail = document.getElementById("email").value;
      let DriverPhone = document.getElementById("phone").value;
      let CarMake = document.getElementById("carmake").value;
      let Seats = document.getElementById("seats").value;
      let ArrivalTime = document.getElementById("arrivaltime").value;
      let route = document.getElementById("route-type").value;
      let Carpoolers = []

      offerACar(DriverFName, DriverLName, DriverEmail, DriverPhone, CarMake, Seats, route, newArray, Carpoolers, datarray[datarray.length - 1], ArrivalTime);
    }


    async function offerACar(firstName, lastName, email, phone, carMake, seats, route, wlocation, carpoolers, eventId, arrivalTime) {
      try {
      
        // First, fetch the event to get its category and address
        const eventResponse = await fetch(`/api/events/${eventId}`);
        if (!eventResponse.ok) {
          throw new Error('Failed to fetch event details');
        }
        const event = await eventResponse.json();

        // Calculate distance between the carpool start location and the event address
        const startCoords = await getCoordinates(wlocation);
        const eventCoords = await getCoordinates(event.address);
        let distanceMiles = calculateDistance(
          startCoords.lat,
          startCoords.lng,
          eventCoords.lat,
          eventCoords.lng
        );
        // Ensure minimum distance of 1 mile and round to 1 decimal place
        distanceMiles = Math.max(1, parseFloat(distanceMiles.toFixed(1)));

        const numPassengers = 1; // Just the driver initially

        let userEmail = "<%= email %>";
        const newcarpools = {
          firstName,
          lastName,
          email,
          phone,
          carMake,
          seats,
          route,
          wlocation,
          carpoolers,
          // Store the event ID with the carpool so we can look up details later
          nameOfEvent: eventId,
          userEmail,
          arrivalTime,
          category: event.category,
          distanceMiles,
          numPassengers
        };

        const jsonData = JSON.stringify(newcarpools);
        const url = "/api/carpools";

        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: jsonData,
        });

        if (!response.ok) {
          throw new Error('Failed to create carpool');
        }

        // Emit event for CO2 savings update and redirect on success
        document.dispatchEvent(new CustomEvent('carpool-created', {
          detail: {
            distanceMiles: distanceMiles,
            numPassengers: numPassengers
          }
        }));

        window.location.href = '/mycarpools';
      } catch (error) {
        console.error("Error:", error);
        // Error handling - user will see error via page redirect or console
      }
    }


    function selectCarpool(element) {
      if (element.classList[2] == 'is-focused') {
        unfocus();
        selectedCarpool = null;
        // Reset counter display
        const counterElement = element.parentElement.querySelector('div[style*="float: right; margin-top: 3px;"]');
        if (counterElement) {
          const carpool = userData1.find(c => c._id === element.id);
          if (carpool) {
            counterElement.innerText = carpool.carpoolers.length + '/' + carpool.seats + ' signed up';
          }
        }
      } else {
        unfocus();
        element.classList.add('is-focused');
        element.innerHTML = "Selected";
        selectedCarpool = element.id;

        // Update counter display
        const counterElement = element.parentElement.querySelector('div[style*="float: right; margin-top: 3px;"]');
        if (counterElement) {
          const carpool = userData1.find(c => c._id === element.id);
          if (carpool) {
            counterElement.innerText = (carpool.carpoolers.length + 1) + '/' + carpool.seats + ' signed up';
          }
        }
      }
    }

    function unfocus() {
      var selects = document.getElementsByClassName('selectCarpool')
      for (const element of selects) { // You can use `let` instead of `const` if you like
        element.classList.remove('is-focused');
        element.innerHTML = "Select"
      }
    }



    // Function to get coordinates from an address (simplified version)
    async function getCoordinates(address) {
      // In a real app, you would use a geocoding service here
      // For this simplified version, we'll return a default location
      // You should replace this with actual geocoding logic if possible
      return {
        lat: 47.6205 + (Math.random() * 0.1 - 0.05), // Random location near Seattle
        lng: -122.3493 + (Math.random() * 0.1 - 0.05)
      };
    }


    // Haversine formula to calculate distance between two points
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 3958.8; // Radius of the Earth in miles
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
        Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c; // Distance in miles
    }

    async function joinCarpool() {
      let newArray = document.getElementById("address-input2").value;
      var personName = "<%= firstName %> <%= lastName %>";
      var email = "<%= email %>";
      var carpoool;
      
      if (selectedCarpool != null) {
        for (var i = 0; i < userData1.length; i++) {
          carpoool = userData1[i];
          if (carpoool["_id"] == selectedCarpool) {
            // Get coordinates for the user's address and carpool address
            const userCoords = await getCoordinates(newArray);
            const carpoolCoords = await getCoordinates(carpoool.wlocation || carpoool.address);
            
            // Calculate straight-line distance in miles
            let distanceMiles = calculateDistance(
              userCoords.lat, 
              userCoords.lng, 
              carpoolCoords.lat, 
              carpoolCoords.lng
            );
            
            // Ensure minimum distance of 1 mile and round to 1 decimal place
            distanceMiles = Math.max(1, parseFloat(distanceMiles.toFixed(1)));
            
            const numPassengers = carpoool.carpoolers.length + 1; // Including the new passenger
            
            carpoool["carpoolers"].push({
              "address": newArray,
              "carpool": selectedCarpool
            })

            const addNewMember = {
              address: newArray,
              carpool: selectedCarpool,
              distanceMiles: distanceMiles,
              numPassengers: numPassengers
            }

            jsonData = JSON.stringify(addNewMember)

            url = "/api/joinCarpool"

            try {
              const response = await fetch(url, {
                method: 'POST',
                headers: {
                  "Content-Type": "application/json",
                },
                body: jsonData,
              });

              if (response.redirected) {
                // Emit event for CO2 savings update
                document.dispatchEvent(new CustomEvent('carpool-joined', {
                  detail: {
                    distanceMiles: distanceMiles,
                    numPassengers: numPassengers
                  }
                }));
                
                window.location.href = response.url;
              }
            } catch (error) {
              console.error('Error joining carpool:', error);
            }
          }
        }
      }
    }


    function closeAllModals() {
      (document.querySelectorAll('.modal') || []).forEach(($modal) => {
        closeModal($modal);
      });
    }
    function closeModal($el) {
      $el.classList.remove('is-active');
    }


    async function createevent() {
      firstName = "<%= firstName %> ";
      lastName = "<%= lastName %> ";
      eventName = document.getElementById("ename").value;
      wlocation = document.getElementById("elocation").value;
      dateb = document.getElementById("edate").value; //hotdogs
      var components = dateb.split(/[-T:]/);

      const address = document.getElementById("create_address").value;

      // Create a new Date object
      var dateTimeObject = new Date(components[0], components[1] - 1, components[2], components[3], components[4]);
      // Format the Date object as a string in the desired format
      date = dateTimeObject.toLocaleString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
      });
      category = document.getElementById("ecategory").value;
      // Normalize category to allowed values just in case
      if (["School","Sports","Extra School Events"].indexOf(category) === -1) {
        category = "School";
      }
      
      // Get coordinates for the user's address and event location
      const userCoords = await getCoordinates(address);
      const eventCoords = await getCoordinates(wlocation);
      
      // Calculate straight-line distance in miles
      let distanceMiles = calculateDistance(
        userCoords.lat, 
        userCoords.lng, 
        eventCoords.lat, 
        eventCoords.lng
      );
      
      // Ensure minimum distance of 1 mile and round to 1 decimal place
      distanceMiles = Math.max(1, parseFloat(distanceMiles.toFixed(1)));
      
      const numPassengers = 1; // Just the driver initially
      
      const data = {
        eventName,
        wlocation,
        date,
        category,
        addressToPut: address,
        distanceMiles,
        numPassengers
      };

      const jsonData = JSON.stringify(data);
      const url = "/api/events";

      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: jsonData,
        });
        
        console.log(response);
      } catch (error) {
        console.error("Error creating event:", error);
      }
    }


  </script>
  <script>
    document.getElementById("eventsJS").innerHTML +=
      '';

    function myTimer(i) {
      let control = document.getElementsByClassName("control");
      for (let i = 0; i < control.length; i++) {

        control[i].style.color = "white"
      }
      let button = document.getElementsByClassName("button");
      for (let i = 0; i < button.length; i++) {
        button[i].style.color = "#ffffff";
        button[i].style.background = "#3c3c3c";
        button[i].style.border = "#bcae98";
      }
      clearInterval(myTimer);
    }
  </script>
  <script defer>
    function navBurger() {
      var burger = document.getElementById('nav-toggle');
      var menu = document.getElementById('navbarMenuHeroC');
      burger.addEventListener('click', function () {
        burger.classList.toggle('is-active');
        menu.classList.toggle('is-active');
      });
    }
    navBurger()


  </script>
  <div class="modal" id="disclaimer-modal">
    <div class="modal-background"></div>
    <div class="modal-card">
      <section class="modal-card-body disclaimer-modal-body">
        <p class="has-text-centered is-size-5">This is an app maintained by Eastside Prep's Hack Club, a group of Upper
          School students that meet every Thursday at 11:05 pm in TMAC-007. Please email Hack Club Co-President Anmol
          Singh Josan, ajosan@eastsideprep.org, if you have any questions.</p>
        <br>
        <p class="has-text-centered is-size-5">Eastside Preparatory School does not mandate or encourage the use of this
          application. They do not claim any responsibility for the maintenance, upkeep, and development of this
          application. This is entirely student-run.</p>
        <br>
        <p class="has-text-centered is-size-5">All credit goes to the original development team: Anmol, Ari, Nikhil,
          Praneel, and Angad.</p>
      </section>
      <footer class="modal-card-foot">
         <div class="buttons">
            <div class="button center is-link disclaimer-close-btn" onclick="closeDisclaimer()">Close</div>
          </div>
      </footer>
    </div>
  </div>
  <script>
    function showDisclaimer() {
      document.getElementById('disclaimer-modal').classList.add('is-active');
    }

    function closeDisclaimer() {
      document.getElementById('disclaimer-modal').classList.remove('is-active');
    }
  </script>
  
  <!-- CO2 Tracking Scripts -->
  <script src="/js/co2Utils.js"></script>
  <script>
    // Listen for carpool creation/join events and update CO2 savings
    document.addEventListener('carpool-created', async (event) => {
      try {
        const { distanceMiles, numPassengers } = event.detail;
        const result = await updateCO2SavingsForCarpool(distanceMiles, numPassengers);
        
        if (result.success) {
          console.log(`CO2 savings updated: ${formatCO2Savings(result.co2Savings)}`);
          
          // Show a success message to the user
          const notification = document.createElement('div');
          notification.className = 'notification is-success is-light';
          notification.style.position = 'fixed';
          notification.style.bottom = '20px';
          notification.style.right = '20px';
          notification.style.zIndex = '1000';
          notification.innerHTML = `
            <button class="delete" onclick="this.parentElement.remove()"></button>
            <strong>ðŸŒ± Great job!</strong>
            <p>You've saved approximately <strong>${formatCO2Savings(result.co2Savings)}</strong> by carpooling!</p>
            <p>Your total COâ‚‚ savings: <strong>${formatCO2Savings(parseFloat(document.getElementById('co2-savings').textContent) + result.co2Savings)}</strong></p>
          `;
          document.body.appendChild(notification);
          
          // Auto-remove notification after 5 seconds
          setTimeout(() => {
            notification.remove();
          }, 10000);
        } else {
          console.error('Failed to update CO2 savings:', result.error);
        }
      } catch (error) {
        console.error('Error handling carpool creation:', error);
      }
    });
    
    // Also listen for carpool-joined events (same as created for now)
    document.addEventListener('carpool-joined', (event) => {
      document.dispatchEvent(new CustomEvent('carpool-created', { detail: event.detail }));
    });
  </script>
  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <script src="/script.js"></script>
</body>

</html>
